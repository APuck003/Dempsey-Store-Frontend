{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from './User';\nconst RESET_MUTATION = gql`\n  mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\n    resetPassword(resetToken: $resetToken, password: $password, confirmPassword: $confirmPassword) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nclass Reset extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      password: '',\n      confirmPassword: ''\n    });\n\n    _defineProperty(this, \"saveToState\", e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: RESET_MUTATION,\n      variables: {\n        resetToken: this.props.resetToken,\n        password: this.state.password,\n        confirmPassword: this.state.confirmPassword\n      },\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }]\n    }, (reset, {\n      error,\n      loading,\n      called\n    }) => {\n      return __jsx(Form, {\n        method: \"post\",\n        onSubmit: async e => {\n          e.preventDefault();\n          await reset();\n          this.setState({\n            password: '',\n            confirmPassword: ''\n          });\n        }\n      }, __jsx(\"fieldset\", {\n        disabled: loading,\n        \"aria-busy\": loading\n      }, __jsx(\"h2\", null, \"Reset your password!\"), __jsx(Error, {\n        error: error\n      }), __jsx(\"label\", {\n        htmlFor: \"password\"\n      }, \"Password\", __jsx(\"input\", {\n        type: \"text\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: this.state.password,\n        onChange: this.saveToState\n      })), __jsx(\"label\", {\n        htmlFor: \"confirmPassword\"\n      }, \"Confirm your Password\", __jsx(\"input\", {\n        type: \"text\",\n        name: \"confirmPassword\",\n        placeholder: \"Confirm Password\",\n        value: this.state.confirmPassword,\n        onChange: this.saveToState\n      })), __jsx(\"button\", {\n        type: \"submit\"\n      }, \"Reset your Password!\")));\n    });\n  }\n\n}\n\n_defineProperty(Reset, \"PropTypes\", {\n  resetToken: PropTypes.string.isRequired\n});\n\nexport default Reset;","map":null,"metadata":{},"sourceType":"module"}